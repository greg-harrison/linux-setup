import XMonad.Layout.IM
import XMonad.Layout.Reflect
import Data.Ratio ((%))
import XMonad.Layout.PerWorkspace
import XMonad hiding (Tall)
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.ManageDocks
import XMonad.Hooks.UrgencyHook
import XMonad.Layout.LayoutHints
import XMonad.Layout.ResizableTile
import XMonad.Prompt
import XMonad.Config.Gnome
import XMonad.Prompt.Shell
import XMonad.Util.Run(spawnPipe)
 
import System.Exit
import System.IO
import Data.Monoid

import System.Environment
import Data.Maybe
 
import qualified XMonad.StackSet as W
import qualified Data.Map        as M

isWork env = isJust (lookup "TRIP_RCDIR" env)
workspace work =
  if work
    then ["Web", "Eclipse", "Email/IM", "RDP", "Extra", "", "", "", ""]
    else ["Term", "Web", "Email/IM", "Extra", "", "", "", "", ""]

number a b
  | b == ""   = a
  | otherwise = a ++ ":" ++ b

ws_num = map (\s -> [s]) ['1'..'9']
ws_number list = zipWith number ws_num list
work_hash ws = M.fromList $ zip ws $ ws_number ws

djust m = case m of Just  _ -> fromJust m
                    Nothing -> ""
dlookup s hash = djust $ M.lookup s hash

main = do
    xmproc <- spawnPipe "xmobar"
    env    <- getEnvironment
    let work    = isWork env
    let ws_list = workspace work
    let ws_hash = work_hash $ ws_list

    xmonad $ withUrgencyHook NoUrgencyHook
           $ gnomeConfig {
                terminal           = "urxvt",
                workspaces         = ws_number ws_list,
                normalBorderColor  = "#333333",
                focusedBorderColor = "#3399cc",
                borderWidth        = 2,
                manageHook         = myManageHook ws_hash,
                modMask            = mod4Mask,
                keys               = myKeys,
                mouseBindings      = myMouseBindings,
                layoutHook         = myLayout ws_hash work,
                logHook            = dynamicLogWithPP $ xmobarPP { 
                                         ppOutput = hPutStrLn xmproc,
                                         ppTitle = xmobarColor "#BEED5F" "",
																				 ppCurrent = xmobarColor "#66AAEE" ""
                                     }
    }

inc_vol = ""
 
myKeys conf@(XConfig {XMonad.modMask = modMask}) = M.fromList $
 
    [ ((modMask              , xK_Return   ), spawn $ XMonad.terminal conf)
    , ((modMask .|. shiftMask, xK_c        ), kill)
    , ((modMask              , xK_space    ), sendMessage NextLayout)
    , ((modMask .|. shiftMask, xK_space    ), setLayout $ XMonad.layoutHook conf)
    , ((modMask              , xK_n        ), refresh)
    , ((modMask              , xK_Tab      ), windows W.focusDown)
    , ((modMask              , xK_j        ), windows W.focusDown)
    , ((modMask              , xK_k        ), windows W.focusUp)
    , ((modMask              , xK_m        ), windows W.focusMaster)
    , ((modMask .|. shiftMask, xK_Return   ), windows W.swapMaster)
    , ((modMask .|. shiftMask, xK_j        ), windows W.swapDown)
    , ((modMask .|. shiftMask, xK_k        ), windows W.swapUp)
    , ((modMask              , xK_h        ), sendMessage Shrink)
    , ((modMask              , xK_l        ), sendMessage Expand)
    , ((modMask .|. shiftMask, xK_h        ), sendMessage MirrorShrink)
    , ((modMask .|. shiftMask, xK_l        ), sendMessage MirrorExpand)
    , ((modMask              , xK_t        ), withFocused $ windows . W.sink)
    , ((modMask              , xK_comma    ), sendMessage (IncMasterN 1))
    , ((modMask              , xK_period   ), sendMessage (IncMasterN (-1)))
    , ((modMask .|. shiftMask, xK_q        ), io (exitWith ExitSuccess))
    , ((modMask              , xK_q        ), spawn "xmonad --recompile; xmonad --restart")
    , ((modMask              , xK_p        ), shellPrompt defaultXPConfig)
    , ((0                    , 0x1008ff13  ), spawn "pa-set-vol plus")
    , ((0                    , 0x1008ff11  ), spawn "pa-set-vol minus")
    , ((0                    , 0x1008ff12  ), spawn "pa-set-vol mute")
    , ((modMask              , xK_Print    ), spawn "scrot -e 'mv $f ~/Screenshots'")
    ]
    ++
 
    [((m .|. modMask, k), windows $ f i)
        | (i, k) <- zip (XMonad.workspaces conf) [xK_1 .. xK_9]
        , (f, m) <- [(W.greedyView, 0), (W.shift, shiftMask)]]
 
    ++
 
    [((m .|. modMask, key), screenWorkspace sc >>= flip whenJust (windows . f))
        | (key, sc) <- zip [xK_w, xK_e, xK_r] [0..]
        , (f, m) <- [(W.view, 0), (W.shift, shiftMask)]]
 
myMouseBindings (XConfig {XMonad.modMask = modMask}) = M.fromList $
    [ ((modMask, button1), (\w -> focus w >> mouseMoveWindow w
                                          >> windows W.shiftMaster))
    , ((modMask, button2), (\w -> focus w >> windows W.shiftMaster))
    , ((modMask, button3), (\w -> focus w >> mouseResizeWindow w
                                          >> windows W.shiftMaster))
    ]

tallLayout ratio = ResizableTall nmaster delta ratio []
  where
    nmaster = 1
    delta   = 1/100

mtallLayout ratio = Mirror $ tallLayout ratio


pidginLayout work = 
    reflectHoriz $
      reflectVert $
      withIM (imRatio work) (ClassName "Pidgin") $
      mtallLayout $ ratio work
  where
    ratio True  = 1/5
    ratio False = 1/4
    imRatio True  = 1%10
    imRatio False = 1%8


myLayout ws_hash work = 
  avoidStruts $ 
    onWorkspace (dlookup "Email/IM" ws_hash) (pidginLayout work) $
    tall ||| mtall ||| Full
  where
     tall    = tallLayout ratio
     mtall   = Mirror tall
     ratio   = 1/2
     nmaster = 1
     delta   = 1/100
 
myManageHook ws_hash =
  composeAll
    [ className =? "Pidgin"      --> doShift (dlookup "Email/IM" ws_hash)
    , className =? "Firefox"     --> doShift (dlookup "Web"      ws_hash)
    , className =? "Thunderbird" --> doShift (dlookup "Email/IM" ws_hash)
    , className =? "Eclipse"     --> doShift (dlookup "Eclipse"  ws_hash)
    , className =? "Remmina"     --> doShift (dlookup "RDP"  ws_hash)]
